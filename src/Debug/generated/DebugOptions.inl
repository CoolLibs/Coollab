/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generate_debug_options.py" and edit the "DebugOptions" function there.
 * -----------------------------------------------------------------------------
 */

#include "Cool/ImGui/ImGuiExtras.h"
#include "Cool/Path/Path.h"
#include "Cool/Serialization/Json.hpp"
#include "Cool/Serialization/JsonAutoSerializer.hpp"
#include "wafl/wafl.hpp"

namespace Cool {
template<typename... Ts>
class DebugOptionsManager; // Forward declare this class so that the friend declaration that comes later on doesn't fail.
}

namespace Lab {

class DebugOptions {
public:
    [[nodiscard]] static auto generate_dump_file() -> bool& { return instance().generate_dump_file; }
    [[nodiscard]] static auto copy_info_dump_to_clipboard() -> bool& { return instance().copy_info_dump_to_clipboard; }
    static void               show_history_window(std::function<void()> callback)
    {
        if (instance().show_history_window)
        {
            ImGui::Begin(Cool::icon_fmt("History", ICOMOON_WRENCH).c_str(), &instance().show_history_window, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!instance().show_history_window) // Window has just been closed manually by the user
                save();
        }
    }
    [[nodiscard]] static auto show_nodes_and_links_registries() -> bool& { return instance().show_nodes_and_links_registries; }
    [[nodiscard]] static auto force_rerender_every_frame() -> bool& { return instance().force_rerender_every_frame; }
    [[nodiscard]] static auto log_when_rendering() -> bool& { return instance().log_when_rendering; }
    [[nodiscard]] static auto log_when_updating_particles() -> bool& { return instance().log_when_updating_particles; }
    [[nodiscard]] static auto log_when_compiling_nodes() -> bool& { return instance().log_when_compiling_nodes; }
    [[nodiscard]] static auto log_when_parsing_node_definition() -> bool& { return instance().log_when_parsing_node_definition; }
    [[nodiscard]] static auto log_when_executing_a_command() -> bool& { return instance().log_when_executing_a_command; }
    [[nodiscard]] static auto log_project_related_events() -> bool& { return instance().log_project_related_events; }
    static void               show_generated_shader_code(std::function<void()> callback)
    {
        if (instance().show_generated_shader_code)
        {
            ImGui::Begin(Cool::icon_fmt("Nodes Code", ICOMOON_WRENCH).c_str(), &instance().show_generated_shader_code, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!instance().show_generated_shader_code) // Window has just been closed manually by the user
                save();
        }
    }
    static void test_shaders_compilation__window(std::function<void()> callback)
    {
        if (instance().test_shaders_compilation__window)
        {
            ImGui::Begin(Cool::icon_fmt("Test Shaders Compilation", ICOMOON_WRENCH).c_str(), &instance().test_shaders_compilation__window, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
            if (!instance().test_shaders_compilation__window) // Window has just been closed manually by the user
                save();
        }
    }

    static void save() { instance()._serializer.save(); }

private:
    struct Instance {
        bool generate_dump_file{false};
        bool copy_info_dump_to_clipboard{false};
        bool show_history_window{false};
        bool show_nodes_and_links_registries{false};
        bool force_rerender_every_frame{false};
        bool log_when_rendering{false};
        bool log_when_updating_particles{false};
        bool log_when_compiling_nodes{false};
        bool log_when_parsing_node_definition{false};
        bool log_when_executing_a_command{false};
        bool log_project_related_events{false};
        bool show_generated_shader_code{false};
        bool test_shaders_compilation__window{false};

        // Must be declared last, after all the variables it serializes, so that the values it loads overwrite the default values, and not the other way around
        Cool::JsonAutoSerializer _serializer{
            "debug_options_lab.json",
            false /*autosave_when_destroyed*/, // This is a static instance, so saving it in the destructor is dangerous because we don't know when it will happen exactly. Instead, we call save manually at the end of the run()
            [&](nlohmann::json const& json) {

#if DEBUG
                Cool::json_get(json, "Show history", show_history_window);
                Cool::json_get(json, "Show nodes and links registries", show_nodes_and_links_registries);
                Cool::json_get(json, "Force rerender every frame", force_rerender_every_frame);
                Cool::json_get(json, "Log when rendering", log_when_rendering);
                Cool::json_get(json, "Log when updating particles", log_when_updating_particles);
                Cool::json_get(json, "Log when compiling nodes", log_when_compiling_nodes);
                Cool::json_get(json, "Log when parsing node definition", log_when_parsing_node_definition);
                Cool::json_get(json, "Log when executing a command", log_when_executing_a_command);
                Cool::json_get(json, "Log project-related events", log_project_related_events);
                Cool::json_get(json, "Show generated shader code", show_generated_shader_code);
                Cool::json_get(json, "Test Shaders Compilation", test_shaders_compilation__window);
#else
                Cool::json_get(json, "Show history", show_history_window);
                Cool::json_get(json, "Show nodes and links registries", show_nodes_and_links_registries);
                Cool::json_get(json, "Force rerender every frame", force_rerender_every_frame);
                Cool::json_get(json, "Log when rendering", log_when_rendering);
                Cool::json_get(json, "Log when updating particles", log_when_updating_particles);
                Cool::json_get(json, "Log when compiling nodes", log_when_compiling_nodes);
                Cool::json_get(json, "Log when parsing node definition", log_when_parsing_node_definition);
                Cool::json_get(json, "Log when executing a command", log_when_executing_a_command);
                Cool::json_get(json, "Log project-related events", log_project_related_events);
                Cool::json_get(json, "Show generated shader code", show_generated_shader_code);
                Cool::json_get(json, "Test Shaders Compilation", test_shaders_compilation__window);
#endif
            },
            [&](nlohmann::json& json) {

#if DEBUG
                Cool::json_set(json, "Show history", show_history_window);
                Cool::json_set(json, "Show nodes and links registries", show_nodes_and_links_registries);
                Cool::json_set(json, "Force rerender every frame", force_rerender_every_frame);
                Cool::json_set(json, "Log when rendering", log_when_rendering);
                Cool::json_set(json, "Log when updating particles", log_when_updating_particles);
                Cool::json_set(json, "Log when compiling nodes", log_when_compiling_nodes);
                Cool::json_set(json, "Log when parsing node definition", log_when_parsing_node_definition);
                Cool::json_set(json, "Log when executing a command", log_when_executing_a_command);
                Cool::json_set(json, "Log project-related events", log_project_related_events);
                Cool::json_set(json, "Show generated shader code", show_generated_shader_code);
                Cool::json_set(json, "Test Shaders Compilation", test_shaders_compilation__window);
#else
                Cool::json_set(json, "Show history", show_history_window);
                Cool::json_set(json, "Show nodes and links registries", show_nodes_and_links_registries);
                Cool::json_set(json, "Force rerender every frame", force_rerender_every_frame);
                Cool::json_set(json, "Log when rendering", log_when_rendering);
                Cool::json_set(json, "Log when updating particles", log_when_updating_particles);
                Cool::json_set(json, "Log when compiling nodes", log_when_compiling_nodes);
                Cool::json_set(json, "Log when parsing node definition", log_when_parsing_node_definition);
                Cool::json_set(json, "Log when executing a command", log_when_executing_a_command);
                Cool::json_set(json, "Log project-related events", log_project_related_events);
                Cool::json_set(json, "Show generated shader code", show_generated_shader_code);
                Cool::json_set(json, "Test Shaders Compilation", test_shaders_compilation__window);
#endif
            },
            Cool::WantsToLogWarnings::CheckInDebugOption
        };
    };

    static auto instance() -> Instance&
    {
        static auto the_instance = Instance{};
        return the_instance;
    }

    static void load() { instance()._serializer.load(); }
    static void update() { instance()._serializer.update(); }

    static void reset_all()
    {
        instance().show_history_window              = false;
        instance().show_nodes_and_links_registries  = false;
        instance().force_rerender_every_frame       = false;
        instance().log_when_rendering               = false;
        instance().log_when_updating_particles      = false;
        instance().log_when_compiling_nodes         = false;
        instance().log_when_parsing_node_definition = false;
        instance().log_when_executing_a_command     = false;
        instance().log_project_related_events       = false;
        instance().show_generated_shader_code       = false;
        instance().test_shaders_compilation__window = false;
        save();
    }

    template<typename... Ts>
    friend class Cool::DebugOptionsManager; // We go through this indirection so that only the files which include "DebugOptionsManager" can call `imgui_ui_for_all_options()`

    static void imgui_ui_for_all_options(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Info Dump: Generate file"}) >= wafl::Matches::Strongly)
        {
            instance().generate_dump_file = ImGui::Button("##Info Dump: Generate file", {ImGui::GetFrameHeight(), ImGui::GetFrameHeight()});
            ImGui::SameLine(0.f, ImGui::GetStyle().ItemInnerSpacing.x);
            ImGui::Text("Info Dump: Generate file");
            if (ImGui::IsItemClicked())
                instance().generate_dump_file = true;

            Cool::ImGuiExtras::help_marker("Creates an info_dump.txt file next to your executable. It can be used when submitting a bug report, in order to give the devs more information.");
        }

        if (wafl::similarity_match({filter, "Info Dump: Copy to clipboard"}) >= wafl::Matches::Strongly)
        {
            instance().copy_info_dump_to_clipboard = ImGui::Button("##Info Dump: Copy to clipboard", {ImGui::GetFrameHeight(), ImGui::GetFrameHeight()});
            ImGui::SameLine(0.f, ImGui::GetStyle().ItemInnerSpacing.x);
            ImGui::Text("Info Dump: Copy to clipboard");
            if (ImGui::IsItemClicked())
                instance().copy_info_dump_to_clipboard = true;

            Cool::ImGuiExtras::help_marker("Copies an info dump to your clipboard. It can be used when submitting a bug report, in order to give the devs more information.");
        }

        if (wafl::similarity_match({filter, "Show history"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Show history", &instance().show_history_window))
                save();
        }

        if (wafl::similarity_match({filter, "Show nodes and links registries"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Show nodes and links registries", &instance().show_nodes_and_links_registries))
                save();
        }

        if (wafl::similarity_match({filter, "Force rerender every frame"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Force rerender every frame", &instance().force_rerender_every_frame))
                save();
        }

        if (wafl::similarity_match({filter, "Log when rendering"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Log when rendering", &instance().log_when_rendering))
                save();
        }

        if (wafl::similarity_match({filter, "Log when updating particles"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Log when updating particles", &instance().log_when_updating_particles))
                save();
        }

        if (wafl::similarity_match({filter, "Log when compiling nodes"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Log when compiling nodes", &instance().log_when_compiling_nodes))
                save();
        }

        if (wafl::similarity_match({filter, "Log when parsing node definition"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Log when parsing node definition", &instance().log_when_parsing_node_definition))
                save();
        }

        if (wafl::similarity_match({filter, "Log when executing a command"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Log when executing a command", &instance().log_when_executing_a_command))
                save();
        }

        if (wafl::similarity_match({filter, "Log project-related events"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Log project-related events", &instance().log_project_related_events))
                save();
        }

        if (wafl::similarity_match({filter, "Show generated shader code"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Show generated shader code", &instance().show_generated_shader_code))
                save();
        }

        if (wafl::similarity_match({filter, "Test Shaders Compilation"}) >= wafl::Matches::Strongly)
        {
            if (Cool::ImGuiExtras::toggle("Test Shaders Compilation", &instance().test_shaders_compilation__window))
                save();
        }
    }

    static void toggle_first_option(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Info Dump: Generate file"}) >= wafl::Matches::Strongly)
        {
            instance().generate_dump_file = !instance().generate_dump_file;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Info Dump: Copy to clipboard"}) >= wafl::Matches::Strongly)
        {
            instance().copy_info_dump_to_clipboard = !instance().copy_info_dump_to_clipboard;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Show history"}) >= wafl::Matches::Strongly)
        {
            instance().show_history_window = !instance().show_history_window;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Show nodes and links registries"}) >= wafl::Matches::Strongly)
        {
            instance().show_nodes_and_links_registries = !instance().show_nodes_and_links_registries;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Force rerender every frame"}) >= wafl::Matches::Strongly)
        {
            instance().force_rerender_every_frame = !instance().force_rerender_every_frame;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when rendering"}) >= wafl::Matches::Strongly)
        {
            instance().log_when_rendering = !instance().log_when_rendering;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when updating particles"}) >= wafl::Matches::Strongly)
        {
            instance().log_when_updating_particles = !instance().log_when_updating_particles;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when compiling nodes"}) >= wafl::Matches::Strongly)
        {
            instance().log_when_compiling_nodes = !instance().log_when_compiling_nodes;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when parsing node definition"}) >= wafl::Matches::Strongly)
        {
            instance().log_when_parsing_node_definition = !instance().log_when_parsing_node_definition;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when executing a command"}) >= wafl::Matches::Strongly)
        {
            instance().log_when_executing_a_command = !instance().log_when_executing_a_command;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log project-related events"}) >= wafl::Matches::Strongly)
        {
            instance().log_project_related_events = !instance().log_project_related_events;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Show generated shader code"}) >= wafl::Matches::Strongly)
        {
            instance().show_generated_shader_code = !instance().show_generated_shader_code;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Test Shaders Compilation"}) >= wafl::Matches::Strongly)
        {
            instance().test_shaders_compilation__window = !instance().test_shaders_compilation__window;
            save();
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }
    }
};

} // namespace Lab
